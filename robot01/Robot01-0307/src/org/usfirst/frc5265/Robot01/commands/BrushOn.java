// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5265.Robot01.commands;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc5265.Robot01.Robot;
import org.usfirst.frc5265.Robot01.RobotMap;
import org.usfirst.frc5265.Robot01.subsystems.BallIntake;

/**
 *
 */
public class BrushOn extends Command {

	boolean BrushState;  
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public BrushOn() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.ballIntake);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        setTimeout(1);
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	// is the brushstate on, then make it off, or vice versa 
    	BrushState = Robot.BrushStateToggle();
    	// test brushstate and either turn the brush motor on or off
    	if (BrushState){
    		Robot.ballIntake.on();
    	} else {
    		Robot.ballIntake.stop();
    	}
    	SmartDashboard.putBoolean("Brush", BrushState);
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	}

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	return true; 
	}

    // Called once after isFinished returns true
    protected void end() {
    	// leaving this here to remind us how we goofed
    	// BallIntake.stop();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
}
