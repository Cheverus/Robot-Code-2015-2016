
// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5265.Robot01.commands;

import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc5265.Robot01.Robot;
import org.usfirst.frc5265.Robot01.subsystems.GateLifter;

/**
 *
 */
public class LiftGateUp extends Command {
public static int fingerToggle;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public LiftGateUp() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.gateLifter);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    // -1,0,1,2 are values for fingerButtonToggle, cycling through all four values
    // 0 and 2 are OFF, -1 is down, 1 is up
    // gatelifter.java will stop the up and down motion by the pot value
    // we test for the stop state here in case the pot isn't working properly
    //
    // this button should trigger the toggle to the next integer
    // and retrieve that value for testing
    fingerToggle = GateLifter.fingerButtonToggle();

   	if (fingerToggle == 1){
    	Robot.gateLifter.up();
	    } else if (fingerToggle == -1) {
		    Robot.gateLifter.down();
		} else if (fingerToggle == 0 || fingerToggle == 2){
	    	Robot.gateLifter.stop();
	    } 	
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {    
    }
    
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return true;
    }

    // Called once after isFinished returns true
    protected void end() {
    // Robot.gateLifter.stop();

    }
   

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
}
