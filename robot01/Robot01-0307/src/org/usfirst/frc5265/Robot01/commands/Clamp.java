
// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5265.Robot01.commands;

import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc5265.Robot01.Robot;
import org.usfirst.frc5265.Robot01.RobotMap;

/**
 *
 */
public class Clamp extends Command {
	// variables to store the numbers on the SmartDashboard
	double clampTime;
	double clampPower;
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public Clamp() {

    	requires(Robot.ballShooter);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        }

        // Called just before this Command runs the first time
        protected void initialize() {
        	//retrieve the variables from the SmartDashboard
        	clampPower = SmartDashboard.getNumber("clamp power");
         	clampTime = SmartDashboard.getNumber("clamp time");
         	//allow the motor to run without stopping after 0.1 seconds
         	RobotMap.ballShooterShooting.setSafetyEnabled(false);
         	//run the motor
         	Robot.ballShooter.on(clampPower);
        }

        // Called repeatedly when this Command is scheduled to run
        protected void execute() {	
        	
        }

        // Make this return true when this Command no longer needs to run execute()
        protected boolean isFinished() {
        	//pause this command for the time on the SmartDashboard
        	Timer.delay(clampTime);
        	//now stop the motor
        	Robot.ballShooter.stop();
        	//and put the safety back on the motor
        	RobotMap.ballShooterShooting.setSafetyEnabled(true);         	
         	return true;
        }

        // Called once after isFinished returns true
        protected void end() {
        }

        // Called when another command which requires one or more of the same
        // subsystems is scheduled to run
        protected void interrupted() {
        	end();
        }
    }
